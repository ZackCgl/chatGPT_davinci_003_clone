import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { trpc } from "../utils/trpc";
import { useState } from "react";
import { TRPCError } from "@trpc/server";
import Header from "../Components/Header";

const Home: NextPage = () => {
  const [idInput, setIdInput] = useState<string>("clau8jj19003av38wfkrl2sgn")
  const hello = trpc.example.hello.useQuery({ text: "from tRPC" });

  const getUser = trpc.product.getUser.useQuery()
  const createUser = trpc.product.createUser.useMutation({onSuccess: () => { getUser.refetch()}})
  const removeUser = trpc.product.removeUser.useMutation({onSuccess: () => { getUser.refetch()}, onError: () => {throw TRPCError}})
  const removeSpecificUser = trpc.product.removeSpecUser.useMutation({onSuccess: () => { getUser.refetch()}})
 
  const createName = async () => {
    await createUser.mutateAsync({name:idInput})
  }
  const RemoveName = async () => {
    await removeUser.mutateAsync()
  }
  const RemoveSpecific = async (useId:string) => {
    await removeSpecificUser.mutateAsync({id: useId})
  }

  

  return (
    <>

      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
       <Header />
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
     
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Create <span className="text-[hsl(280,100%,70%)]">T3</span> App
          </h1>
          <div>
          <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={createName}
      >
     Create User
      </button>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={RemoveName}
      >
    Remove All
      </button>
      
       
      <input value={idInput} onChange={(e) => setIdInput(e.target.value)}/>
      </div>
      <p className="text-white">{getUser.data?.map((use) => {
        return <div key={use.id} className="cursor-pointer" 
                    onClick={() => RemoveSpecific(use.id)}>{use.name} {use.id}
                </div>
      })}
      </p>
      
      
      
          <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8">
            <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
              href="https://create.t3.gg/en/usage/first-steps"
            >
              <h3 className="text-2xl font-bold">First Steps →</h3>
              <div className="text-lg">
                Just the basics - Everything you need to know to set up your
                database and authentication.
              </div>
            </Link>
            <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
              href="https://create.t3.gg/en/introduction"
            >
              <h3 className="text-2xl font-bold">Documentation →</h3>
              <div className="text-lg">
                Learn more about Create T3 App, the libraries it uses, and how
                to deploy it.
              </div>
            </Link>
          </div>
          <div className="flex flex-col items-center gap-2">
            <p className="text-2xl text-white">
              {hello.data ? hello.data.greeting : "Loading tRPC query..."}
            </p>
            <AuthShowcase />
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined },
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => signOut() : () => signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
     
    </div>
  );
};
